package r01f.servlet.proxy;

import javax.servlet.ServletConfig;

import lombok.Getter;
import lombok.experimental.Accessors;
import lombok.extern.slf4j.Slf4j;
import r01f.config.ContainsConfigData;
import r01f.debug.Debuggable;
import r01f.types.url.Host;
import r01f.types.url.UrlPath;
import r01f.types.url.UrlProtocol;
import r01f.types.url.UrlProtocol.StandardUrlProtocol;
import r01f.util.types.Numbers;
import r01f.util.types.Strings;

@Slf4j
@Accessors(prefix="_")
public class HttpProxyServletConfig
  implements ContainsConfigData,
  			 Debuggable {
/////////////////////////////////////////////////////////////////////////////////////////
//	CONSTANTS
/////////////////////////////////////////////////////////////////////////////////////////
	public static final String INIT_PARAM_NAME_FOR_TARGET_APP_SERVER_HOST_NAME = "TargetAppServerHost";
	public static final String INIT_PARAM_NAME_FOR_TARGET_APP_SERVER_HOST_PORT = "TargetAppServerPort";
	public static final String INIT_PARAM_NAME_FOR_PATH_TRIM = "PathTrim";
	public static final String INIT_PARAM_NAME_FOR_PATH_PREPEND = "PathPrepend";
	public static final String INIT_PARAM_NAME_FOR_MAX_FILE_UPLOAD_SIZE = "maxFileUploadSize";

	private static final int DEF_MAX_UPLOAD_FILE_SIZE =  5 * 1024 * 1024;
/////////////////////////////////////////////////////////////////////////////////////////
//	FIELDS
/////////////////////////////////////////////////////////////////////////////////////////
	/**
	 * The servlet context path (ie: xxxWar)
	 */
	@Getter private final UrlPath _servletContextUrlPath;
	/**
	 * The target server protocol
	 */
	@Getter private final UrlProtocol _targetProtocol;
	/**
	 * The host to which we are proxying requests. Default value is "localhost".
	 */
	@Getter private final Host _targetHost;
	/**
	 * The port on the proxy host to which requests are proxied. Default value is 80.
	 */
	@Getter final private int _targetPort;
//	/**
//	 * When the proxied-request is a GWT client-to-RemoteServlet request, a header called X-gwtCodeRelPath
//	 * is appended to the proxied request including the GWT-compiled code path relative to the destination WAR
//	 * This relative path is the location of the policy files generated by GWT-compiler for the serialized types
//	 */
//	@Getter @Setter private String _gwtCompiledCodeProxiedWarRelativePath = "";
	/**
	 * Setting that allows removing the initial path from client. Allows specifying /twitter/* as synonym for twitter.com.
	 */
	@Getter private final UrlPath _pathTrim;
	/**
	 * The path to be prepended to the url path BEFORE proxing and AFTER path trim phase
	 */
	@Getter private final UrlPath _pathPrepend;
	/**
	 * The maximum size for uploaded files in bytes. Default value is 5MB.
	 */
	@Getter private final int _maxFileUploadSize;

	@Getter private final boolean _followRedirects;
/////////////////////////////////////////////////////////////////////////////////////////
//	CONSTRUCTOR
/////////////////////////////////////////////////////////////////////////////////////////
	public HttpProxyServletConfig(final UrlPath servletContextPath) {
		this(servletContextPath,
			 Host.localhost(),StandardUrlProtocol.HTTP.getDefaultPort());
	}
	public HttpProxyServletConfig(final UrlPath servletContextPath,
								  // proxy params
								  final Host targetHost) {
		this(servletContextPath,
			 Host.strict(targetHost),
			 targetHost.asUrl().getPort());
	}
	public HttpProxyServletConfig(final UrlPath servletContextPath,
								  // proxy params
								  final Host targetHost,final int targetPort) {
		_servletContextUrlPath = servletContextPath;
		// proxy params
		_targetProtocol = targetHost.asUrl().getProtocol();
		_targetHost = Host.strict(targetHost);
		_targetPort = targetPort;
		_pathTrim = null;
		_pathPrepend = null;
		_maxFileUploadSize = 5 * 1024 * 1024;
		_followRedirects = true;
	}
	public HttpProxyServletConfig(final UrlPath servletContextPath,
								  // proxy params
								  final Host targetHost,final int targetPort,
						   		  final UrlPath pathTrim,final UrlPath pathPrepend) {
		_servletContextUrlPath = servletContextPath;
		// proxy params
		_targetProtocol = targetHost.asUrl().getProtocol();
		_targetHost = Host.strict(targetHost);
		_targetPort = targetPort;
		_pathTrim = pathTrim;
		_pathPrepend = pathPrepend;
		_maxFileUploadSize = 5 * 1024 * 1024;
		_followRedirects = true;
	}
	public HttpProxyServletConfig(final UrlPath servletContextPath,
								  // proxy params
								  final Host targetHost,final int targetPort,
						   		  final UrlPath pathTrim,final UrlPath pathPrepend,
						   		  final int maxFileUploadSize,
						   		  final boolean followRedirects) {
		_servletContextUrlPath = servletContextPath;
		// proxy params
		_targetProtocol = targetHost.asUrl().getProtocol();
		_targetHost = Host.strict(targetHost);;
		_targetPort = targetPort;
		_pathTrim = pathTrim;
		_pathPrepend = pathPrepend;
		_maxFileUploadSize = maxFileUploadSize;
		_followRedirects = followRedirects;
	}
	public HttpProxyServletConfig(final ServletConfig servletConfig) {
		// get the servlet context
		String servletContext = servletConfig.getServletContext()
											 .getContextPath();
		_servletContextUrlPath = UrlPath.from(Strings.isNOTNullOrEmpty(servletContext) ? UrlPath.from(servletContext)
																					   : UrlPath.from("/"));	// default path

		// Get the proxy host
		String proxyHostFromWebXML = servletConfig.getInitParameter(INIT_PARAM_NAME_FOR_TARGET_APP_SERVER_HOST_NAME);
		if (Strings.isNullOrEmpty(proxyHostFromWebXML)) throw new IllegalArgumentException("Proxy host not set, please set '" + INIT_PARAM_NAME_FOR_TARGET_APP_SERVER_HOST_NAME + "' init-param in web.xml");
		_targetHost = Host.strict(proxyHostFromWebXML);	// do NOT include the port

		// Get the proxy port if specified
		String proxyPortFromWebXML = servletConfig.getInitParameter(INIT_PARAM_NAME_FOR_TARGET_APP_SERVER_HOST_PORT);
		if (Strings.isNOTNullOrEmpty(proxyPortFromWebXML)) {
			if (Numbers.isInteger(proxyPortFromWebXML)) {
				_targetPort = Integer.parseInt(proxyPortFromWebXML);
			} else {
				throw new IllegalArgumentException("Proxy port=" + proxyPortFromWebXML + " is NOT valid, please check '" + INIT_PARAM_NAME_FOR_TARGET_APP_SERVER_HOST_PORT + "' init-param  in web.xml");
			}
		} else {
			_targetPort = Host.of(proxyHostFromWebXML).asUrl().getPortOrDefault(StandardUrlProtocol.HTTP.getDefaultPort());
		}

		// Get the protocol
		_targetProtocol = UrlProtocol.fromPort(_targetPort);

		// Get the pathTrim & pathPrepend if specified
		String pathTrimFromWebXML = servletConfig.getInitParameter(INIT_PARAM_NAME_FOR_PATH_TRIM);
		if (Strings.isNOTNullOrEmpty(pathTrimFromWebXML)) {
			_pathTrim = UrlPath.from(pathTrimFromWebXML);
		} else {
			_pathTrim = null;
		}
		String pathPrependFromWebXml = servletConfig.getInitParameter(INIT_PARAM_NAME_FOR_PATH_PREPEND);
		if (Strings.isNOTNullOrEmpty(pathPrependFromWebXml)) {
			_pathPrepend = UrlPath.from(pathPrependFromWebXml);
		} else {
			_pathPrepend = null;
		}

//		// Get the proxy path if specified
//		String gwtCompiledCodeProxiedWarRelativePathFromWebXML = servletConfig.getInitParameter("gwtCompiledCodeProxiedWarRelativePath");
//		if (Strings.isNOTNullOrEmpty(gwtCompiledCodeProxiedWarRelativePathFromWebXML)) this.setGwtCompiledCodeProxiedWarRelativePath(gwtCompiledCodeProxiedWarRelativePathFromWebXML);

		// Get the maximum file upload size if specified
		String maxFileUploadSizeFromWebXML = servletConfig.getInitParameter(INIT_PARAM_NAME_FOR_MAX_FILE_UPLOAD_SIZE);
		if (Strings.isNOTNullOrEmpty(maxFileUploadSizeFromWebXML)) {
			if (Numbers.isInteger(maxFileUploadSizeFromWebXML)) {
				_maxFileUploadSize = Integer.parseInt(maxFileUploadSizeFromWebXML);
			} else {
				log.error("Error in {} web.xml param: {}={} is NOT a valid number",
						  HttpProxy.class,INIT_PARAM_NAME_FOR_MAX_FILE_UPLOAD_SIZE,maxFileUploadSizeFromWebXML);
				_maxFileUploadSize = DEF_MAX_UPLOAD_FILE_SIZE;
			}
		} else {
			_maxFileUploadSize = DEF_MAX_UPLOAD_FILE_SIZE;
		}

		// follow redirects
		_followRedirects = true;
		log.warn("{} intance initialized proxying to {}:{}",
				 HttpProxy.class.getSimpleName(),_targetHost,_targetPort);
	}
/////////////////////////////////////////////////////////////////////////////////////////
//
/////////////////////////////////////////////////////////////////////////////////////////
	public String getTargetServerHostAndPort() {
		if (this.getTargetPort() == StandardUrlProtocol.HTTP.getDefaultPort()) {
			return this.getTargetHost().asString();
		}
		return this.getTargetHost() + ":" + this.getTargetPort();
	}
/////////////////////////////////////////////////////////////////////////////////////////
//	DEBUG
/////////////////////////////////////////////////////////////////////////////////////////
	@Override
	public CharSequence debugInfo() {
		return Strings.customized("target host/port={}/{} max upload file size={} pathTrim={} follow redirects={}",
								  _targetHost,_targetPort,
								  _maxFileUploadSize,
								  _pathTrim,
								  _followRedirects);
	}
}
