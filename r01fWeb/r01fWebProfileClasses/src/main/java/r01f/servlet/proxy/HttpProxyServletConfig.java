package r01f.servlet.proxy;

import java.util.Collection;

import javax.servlet.ServletConfig;

import com.google.common.base.Function;
import com.google.common.base.Joiner;
import com.google.common.base.Splitter;
import com.google.common.collect.FluentIterable;
<<<<<<< HEAD
=======
import com.google.common.collect.Iterables;
>>>>>>> release/1.0.1-20210604-01
import com.google.common.collect.Lists;

import lombok.Getter;
import lombok.experimental.Accessors;
import lombok.extern.slf4j.Slf4j;
import r01f.config.ContainsConfigData;
import r01f.debug.Debuggable;
import r01f.patterns.Memoized;
import r01f.patterns.Supplier;
import r01f.types.url.Host;
import r01f.types.url.Url;
import r01f.types.url.UrlPath;
import r01f.types.url.UrlProtocol.StandardUrlProtocol;
import r01f.util.types.Numbers;
import r01f.util.types.StringSplitter;
import r01f.util.types.Strings;
import r01f.util.types.collections.CollectionUtils;

@Slf4j
@Accessors(prefix="_")
public class HttpProxyServletConfig
  implements ContainsConfigData,
			 Debuggable {
/////////////////////////////////////////////////////////////////////////////////////////
//	CONSTANTS
/////////////////////////////////////////////////////////////////////////////////////////
<<<<<<< HEAD
	public static final String INIT_PARAM_NAME_FOR_TARGET_APP_SERVER_HOST_NAME = "TargetAppServerHost";
	public static final String INIT_PARAM_NAME_FOR_TARGET_APP_SERVER_HOST_PORT = "TargetAppServerPort";

	public static final String INIT_PARAM_NAME_FOR_TARGET_APP_SERVER_HOST_URLS = "TargetAppServerHosts";
=======
	public static final String INIT_PARAM_NAME_FOR_TARGET_APP_SERVER_HOSTS = "TargetAppServerHosts";	// BEWARE r01p: check that R01PProxyDefForAppServerCluster has the SAME value
>>>>>>> release/1.0.1-20210604-01

	public static final String INIT_PARAM_NAME_FOR_PATH_TRIM = "PathTrim";
	public static final String INIT_PARAM_NAME_FOR_PATH_PREPEND = "PathPrepend";
	public static final String INIT_PARAM_NAME_FOR_MAX_FILE_UPLOAD_SIZE = "maxFileUploadSize";

	public static final int DEF_MAX_UPLOAD_FILE_SIZE =  5 * 1024 * 1024;
/////////////////////////////////////////////////////////////////////////////////////////
//	FIELDS
/////////////////////////////////////////////////////////////////////////////////////////
	/**
<<<<<<< HEAD
	 * The servlet context path (ie: xxxWar)
	 */
	@Getter private final UrlPath _servletContextUrlPath;
	/**
=======
>>>>>>> release/1.0.1-20210604-01
	 * The host to which we are proxying requests. Default value is "localhost".
	 */
	@Getter private final Collection<Url> _endPoints;
//	/**
//	 * When the proxied-request is a GWT client-to-RemoteServlet request, a header called X-gwtCodeRelPath
//	 * is appended to the proxied request including the GWT-compiled code path relative to the destination WAR
//	 * This relative path is the location of the policy files generated by GWT-compiler for the serialized types
//	 */
//	@Getter @Setter private String _gwtCompiledCodeProxiedWarRelativePath = "";
	/**
	 * Setting that allows removing the initial path from client. Allows specifying /twitter/* as synonym for twitter.com.
	 */
	@Getter private final UrlPath _pathTrim;
	/**
	 * The path to be prepended to the url path BEFORE proxing and AFTER path trim phase
	 */
	@Getter private final UrlPath _pathPrepend;
	/**
	 * The maximum size for uploaded files in bytes. Default value is 5MB.
	 */
	@Getter private final int _maxFileUploadSize;
	/**
	 * If the endopoint returns a redir, must this redir be followed?
	 */
	@Getter private final boolean _followRedirects;
/////////////////////////////////////////////////////////////////////////////////////////
//	CONSTRUCTOR
/////////////////////////////////////////////////////////////////////////////////////////
	public HttpProxyServletConfig() {
		this(Host.localhost(),StandardUrlProtocol.HTTP.getDefaultPort());
	}
<<<<<<< HEAD
	public HttpProxyServletConfig(final UrlPath servletContextPath,
								  // proxy params
								  final Host... targetHost) {
		this(servletContextPath,
			 FluentIterable.from(targetHost)
=======
	public HttpProxyServletConfig(// proxy params
								  final Host... targetHost) {
		this(FluentIterable.from(targetHost)
>>>>>>> release/1.0.1-20210604-01
						   .transform(new Function<Host,Url>() {
												@Override
												public Url apply(final Host host) {
													return host.asUrl();
												}
										 })
						   .toList());
	}
	public HttpProxyServletConfig(// proxy params
								  final Host targetHost,final int targetPort) {
<<<<<<< HEAD
		this(servletContextPath,
			 Lists.newArrayList(Url.from(targetHost,targetPort)));
	}
	public HttpProxyServletConfig(final UrlPath servletContextPath,
								  // proxy params
								  final Collection<Url> endPoints) {
		_servletContextUrlPath = servletContextPath;
		// proxy params
		_endPoints = endPoints;
		_pathTrim = null;
		_pathPrepend = null;
		_maxFileUploadSize = 5 * 1024 * 1024;
		_followRedirects = true;
=======
		this(Lists.newArrayList(Url.from(targetHost,targetPort)));
	}
	public HttpProxyServletConfig(// proxy params
								  final Collection<Url> endPoints) {
		this(endPoints,
			 null,null,					// path trim & path prepend
			 DEF_MAX_UPLOAD_FILE_SIZE,	// max file upload
			 true);						// follow redirs
>>>>>>> release/1.0.1-20210604-01
	}
	public HttpProxyServletConfig(// proxy params
								  final Host targetHost,final int targetPort,
<<<<<<< HEAD
									 final UrlPath pathTrim,final UrlPath pathPrepend) {
		this(servletContextPath,
			 Lists.newArrayList(Url.from(targetHost,targetPort)),
			 pathTrim,pathPrepend);
	}
	public HttpProxyServletConfig(final UrlPath servletContextPath,
								  // proxy params
								  final Collection<Url> endPoints,
									 final UrlPath pathTrim,final UrlPath pathPrepend) {
		_servletContextUrlPath = servletContextPath;
		// proxy params
		_endPoints = endPoints;
		_pathTrim = pathTrim;
		_pathPrepend = pathPrepend;
		_maxFileUploadSize = 5 * 1024 * 1024;
		_followRedirects = true;
=======
								  final UrlPath pathTrim,final UrlPath pathPrepend) {
		this(Lists.newArrayList(Url.from(targetHost,targetPort)),
			 pathTrim,pathPrepend);
>>>>>>> release/1.0.1-20210604-01
	}
	public HttpProxyServletConfig(// proxy params
								  final Collection<Url> endPoints,
								  final UrlPath pathTrim,final UrlPath pathPrepend) {
		this(endPoints,
			 pathTrim,pathPrepend,
			 DEF_MAX_UPLOAD_FILE_SIZE,	// max file upload
			 true);						// follow redirs
	}
	public HttpProxyServletConfig(// proxy params
								  final Host targetHost,final int targetPort,
<<<<<<< HEAD
									 final UrlPath pathTrim,final UrlPath pathPrepend,
									 final int maxFileUploadSize,
									 final boolean followRedirects) {
		this(servletContextPath,
			 Lists.newArrayList(Url.from(targetHost,targetPort)),
=======
								  final UrlPath pathTrim,final UrlPath pathPrepend,
								  final int maxFileUploadSize,
								  final boolean followRedirects) {
		this(Lists.newArrayList(Url.from(targetHost,targetPort)),
>>>>>>> release/1.0.1-20210604-01
			 pathTrim,pathPrepend,
			 maxFileUploadSize,
			 followRedirects);
	}
<<<<<<< HEAD
	public HttpProxyServletConfig(final UrlPath servletContextPath,
								  // proxy params
								  final Collection<Url> endPoints,
									 final UrlPath pathTrim,final UrlPath pathPrepend,
									 final int maxFileUploadSize,
									 final boolean followRedirects) {
		_servletContextUrlPath = servletContextPath;
=======
	public HttpProxyServletConfig(// proxy params
								  final Collection<Url> endPoints,
								  final UrlPath pathTrim,final UrlPath pathPrepend,
								  final int maxFileUploadSize,
								  final boolean followRedirects) {
>>>>>>> release/1.0.1-20210604-01
		// proxy params
		_endPoints = endPoints;
		_pathTrim = pathTrim;
		_pathPrepend = pathPrepend;
		_maxFileUploadSize = maxFileUploadSize;
		_followRedirects = followRedirects;
	}
	public HttpProxyServletConfig(final ServletConfig servletConfig) {
		String proxyHostsFromWebXML = servletConfig.getInitParameter(INIT_PARAM_NAME_FOR_TARGET_APP_SERVER_HOSTS);

<<<<<<< HEAD
		String proxyHostsFromWebXML = servletConfig.getInitParameter(INIT_PARAM_NAME_FOR_TARGET_APP_SERVER_HOST_URLS);

		// --- Multiple Hosts
=======
>>>>>>> release/1.0.1-20210604-01
		if (Strings.isNOTNullOrEmpty(proxyHostsFromWebXML)) {
			_endPoints = FluentIterable.from(StringSplitter.using(Splitter.on(";"))
														   .at(proxyHostsFromWebXML)
														   .split())
									   .transform(new Function<String,Url>() {
															@Override
															public Url apply(final String endPointStr) {
																return Url.from(endPointStr);
															}
									   			  })
									   .toList();
<<<<<<< HEAD
		}
		// --- Single Hosts
		else {
			// Get the proxy host
			String endPointHostFromWebXML = servletConfig.getInitParameter(INIT_PARAM_NAME_FOR_TARGET_APP_SERVER_HOST_NAME);
			if (Strings.isNullOrEmpty(endPointHostFromWebXML)) throw new IllegalArgumentException("Proxy host not set, please set '" + INIT_PARAM_NAME_FOR_TARGET_APP_SERVER_HOST_NAME + "' init-param in web.xml");
			Host targetHost = Host.strict(endPointHostFromWebXML);	// do NOT include the port

			// Get the proxy port if specified
			String endPointPortFromWebXML = servletConfig.getInitParameter(INIT_PARAM_NAME_FOR_TARGET_APP_SERVER_HOST_PORT);
			int targetPort = 80;
			if (Strings.isNOTNullOrEmpty(endPointPortFromWebXML)) {
				if (Numbers.isInteger(endPointPortFromWebXML)) {
					targetPort = Integer.parseInt(endPointPortFromWebXML);
				} else {
					throw new IllegalArgumentException("Proxy port=" + endPointPortFromWebXML + " is NOT valid, please check '" + INIT_PARAM_NAME_FOR_TARGET_APP_SERVER_HOST_PORT + "' init-param  in web.xml");
				}
			} else {
				targetPort = Host.of(endPointHostFromWebXML).asUrl().getPortOrDefault(StandardUrlProtocol.HTTP.getDefaultPort());
			}
			_endPoints = Lists.newArrayList(Url.from(targetHost,targetPort));
=======
		} else {
			log.debug("[proxy servlet] > the web.xml file DOES NOT contains the {} param that contains the [target app server host]",INIT_PARAM_NAME_FOR_TARGET_APP_SERVER_HOSTS);
			_endPoints = null;
>>>>>>> release/1.0.1-20210604-01
		}

		// Get the pathTrim & pathPrepend if specified
		String pathTrimFromWebXML = servletConfig.getInitParameter(INIT_PARAM_NAME_FOR_PATH_TRIM);
		if (Strings.isNOTNullOrEmpty(pathTrimFromWebXML)) {
			_pathTrim = UrlPath.from(pathTrimFromWebXML);
		} else {
			_pathTrim = null;
		}
		String pathPrependFromWebXml = servletConfig.getInitParameter(INIT_PARAM_NAME_FOR_PATH_PREPEND);
		if (Strings.isNOTNullOrEmpty(pathPrependFromWebXml)) {
			_pathPrepend = UrlPath.from(pathPrependFromWebXml);
		} else {
			_pathPrepend = null;
		}

//		// Get the proxy path if specified
//		String gwtCompiledCodeProxiedWarRelativePathFromWebXML = servletConfig.getInitParameter("gwtCompiledCodeProxiedWarRelativePath");
//		if (Strings.isNOTNullOrEmpty(gwtCompiledCodeProxiedWarRelativePathFromWebXML)) this.setGwtCompiledCodeProxiedWarRelativePath(gwtCompiledCodeProxiedWarRelativePathFromWebXML);

		// Get the maximum file upload size if specified
		String maxFileUploadSizeFromWebXML = servletConfig.getInitParameter(INIT_PARAM_NAME_FOR_MAX_FILE_UPLOAD_SIZE);
		if (Strings.isNOTNullOrEmpty(maxFileUploadSizeFromWebXML)) {
			if (Numbers.isInteger(maxFileUploadSizeFromWebXML)) {
				_maxFileUploadSize = Integer.parseInt(maxFileUploadSizeFromWebXML);
			} else {
				log.error("Error in {} web.xml param: {}={} is NOT a valid number",
						  HttpProxyServletDelegate.class,INIT_PARAM_NAME_FOR_MAX_FILE_UPLOAD_SIZE,maxFileUploadSizeFromWebXML);
				_maxFileUploadSize = DEF_MAX_UPLOAD_FILE_SIZE;
			}
		} else {
			_maxFileUploadSize = DEF_MAX_UPLOAD_FILE_SIZE;
		}

		// follow redirects
		_followRedirects = true;
		log.warn("{} intance initialized proxying to {}",
				 HttpProxyServletDelegate.class.getSimpleName(),this.endPointsAsString());
<<<<<<< HEAD
=======
	}
	public HttpProxyServletConfig mixedWith(final HttpProxyServletConfig other) {
		Collection<Url> endPoints = CollectionUtils.hasData(this.getEndPoints()) && CollectionUtils.hasData(other.getEndPoints())
										? Lists.newArrayList(Iterables.concat(this.getEndPoints(),other.getEndPoints()))
										: CollectionUtils.hasData(this.getEndPoints()) ? this.getEndPoints()
																					   : CollectionUtils.hasData(other.getEndPoints()) ? other.getEndPoints()
																							   										   : null;		// both null
		UrlPath pathTrim = this.getPathTrim() != null && other.getPathTrim() != null
								? this.getPathTrim() 
								: this.getPathTrim() != null ? this.getPathTrim()
															 : other.getPathTrim() != null ? other.getPathTrim()
																	 					   : null;	// both null
		UrlPath pathPrepend = this.getPathPrepend() != null && other.getPathPrepend() != null
									? this.getPathPrepend()
									: this.getPathPrepend() != null ? this.getPathPrepend()
																	: other.getPathPrepend() != null ? other.getPathPrepend()
																									 : null;	// both null;
		int maxFileUploadSize = this.getMaxFileUploadSize() > other.getMaxFileUploadSize() 
									? this.getMaxFileUploadSize()
									: other.getMaxFileUploadSize();
		boolean followRedirects = this.isFollowRedirects() | other.isFollowRedirects();
		
		HttpProxyServletConfig out = new HttpProxyServletConfig(endPoints,
										  						pathTrim,pathPrepend,
										  						maxFileUploadSize,
										  						followRedirects);
		return out;
	}
/////////////////////////////////////////////////////////////////////////////////////////
//	URL PATH REWRITE
/////////////////////////////////////////////////////////////////////////////////////////
	private final Memoized<HttpProxyServletUrlPathRewriter> _urlPathRewriter = Memoized.using(new Supplier<HttpProxyServletUrlPathRewriter>() {
																										@Override
																										public HttpProxyServletUrlPathRewriter supply() {
																											return _pathPrepend != null 
																												|| _pathTrim != null ? new HttpProxyServletUrlPathRewriterDefaultImpl(_pathTrim,_pathPrepend)
																																	 : null;
																										}
																							  });
	/**
	 * Returns an url path rewriter that uses the pathTrim or pathPrepend config
	 * @return
	 */
	public HttpProxyServletUrlPathRewriter getUrlPathRewriter() {
		return _urlPathRewriter.get();
>>>>>>> release/1.0.1-20210604-01
	}
/////////////////////////////////////////////////////////////////////////////////////////
//	DEBUG
/////////////////////////////////////////////////////////////////////////////////////////
	@Override
	public CharSequence debugInfo() {
		return Strings.customized("end-points={} max upload file size={} pathTrim={} follow redirects={}",
								  this.endPointsAsString(),
								  _maxFileUploadSize,
								  _pathTrim,
								  _followRedirects);
	}
	public String endPointsAsString() {
<<<<<<< HEAD
		return FluentIterable.from(_endPoints)
							 .join(Joiner.on(";"));
=======
		return CollectionUtils.hasData(_endPoints) ? FluentIterable.from(_endPoints)
							 									   .join(Joiner.on("|"))
							 					   : "";
>>>>>>> release/1.0.1-20210604-01
	}
}
